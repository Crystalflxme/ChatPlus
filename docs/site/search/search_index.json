{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Simple, easy, useful. \u00b6 ChatPlus allows developers to easily use Roblox\u2019s Lua Chat System without the hassle of setting it all up themselves. Here are some of the system's features: Fully customize what a chat message shows up as in your game in a short time span Set specific users to have their own chat formatting Assign complex formatting for groups such as: rank specific formatting, ranges of ranks, and formatting to be applied to all members Setup a custom system/server message with your own formatting A built in module for easily creating your own custom ChatSpeakers Client sided settings to dynammically control things like BubbleChat at any time needed Ability to have special formatting for gamepass owners Get the model here on Roblox , see ChatPlus in action , or check out the DevForum thread here . Want to try ChatPlus? Learn how to get started here .","title":"Welcome"},{"location":"#simple-easy-useful","text":"ChatPlus allows developers to easily use Roblox\u2019s Lua Chat System without the hassle of setting it all up themselves. Here are some of the system's features: Fully customize what a chat message shows up as in your game in a short time span Set specific users to have their own chat formatting Assign complex formatting for groups such as: rank specific formatting, ranges of ranks, and formatting to be applied to all members Setup a custom system/server message with your own formatting A built in module for easily creating your own custom ChatSpeakers Client sided settings to dynammically control things like BubbleChat at any time needed Ability to have special formatting for gamepass owners Get the model here on Roblox , see ChatPlus in action , or check out the DevForum thread here . Want to try ChatPlus? Learn how to get started here .","title":"Simple, easy, useful."},{"location":"examples/","text":"ChatPlus in action: \u00b6 ChatPlus makes it easy to create formatting like this to let you focus on how it looks rather than if it works. Editing ChatPlus' Special Formatting \u00b6 ChatPlus has a special way of hanlding formatting to make it easy to customize how your chat looks. This method of changing formatting can be used anywhere in ChatPlus for formatting anything. You can read more about the specifics here . Editing the formatting of text with this method is as simple as follows: -- You could have a chat tag with a custom name color... local FormattingTable = { { \"NameColor\" , Color3 . fromRGB ( 255 , 255 , 255 )}, { \"Tags\" , {{ TagText = \"Cool Person\" , TagColor = Color3 . fromRGB ( 255 , 0 , 0 )}}} } -- Or some big wacky text! local FormattingTable2 = { { \"Font\" , Enum . Font . Cartoon }, { \"TextSize\" , 32 } } -- Or maybe... both! local FormattingTable3 = { { \"NameColor\" , Color3 . fromRGB ( 255 , 0 , 0 )}, { \"Tags\" , {{ TagText = \"Super Cool Person\" , TagColor = Color3 . fromRGB ( 0 , 255 , 0 )}}}, { \"Font\" , Enum . Font . Fantasy }, { \"TextSize\" , 32 } } A single table for everything! Nice. Want to try ChatPlus? Learn how to get started here .","title":"Examples"},{"location":"examples/#chatplus-in-action","text":"ChatPlus makes it easy to create formatting like this to let you focus on how it looks rather than if it works.","title":"ChatPlus in action:"},{"location":"examples/#editing-chatplus-special-formatting","text":"ChatPlus has a special way of hanlding formatting to make it easy to customize how your chat looks. This method of changing formatting can be used anywhere in ChatPlus for formatting anything. You can read more about the specifics here . Editing the formatting of text with this method is as simple as follows: -- You could have a chat tag with a custom name color... local FormattingTable = { { \"NameColor\" , Color3 . fromRGB ( 255 , 255 , 255 )}, { \"Tags\" , {{ TagText = \"Cool Person\" , TagColor = Color3 . fromRGB ( 255 , 0 , 0 )}}} } -- Or some big wacky text! local FormattingTable2 = { { \"Font\" , Enum . Font . Cartoon }, { \"TextSize\" , 32 } } -- Or maybe... both! local FormattingTable3 = { { \"NameColor\" , Color3 . fromRGB ( 255 , 0 , 0 )}, { \"Tags\" , {{ TagText = \"Super Cool Person\" , TagColor = Color3 . fromRGB ( 0 , 255 , 0 )}}}, { \"Font\" , Enum . Font . Fantasy }, { \"TextSize\" , 32 } } A single table for everything! Nice. Want to try ChatPlus? Learn how to get started here .","title":"Editing ChatPlus' Special Formatting"},{"location":"api/speakerplus/","text":"SpeakerPlus is a module within ChatPlus that easily allows you to create your own custom chat speaker objects with their own name, formatting, and chats. More specifically, it creates ChatSpeaker objects for you. Global Methods \u00b6 SpeakerPlus . new () Description: Will create a SpeakerPlus object for you with the given speaker name in the chat and applied formatting from the FormattingTable. Parameters: Name Type Required SpeakerName string Yes FormattingTable array No Returns: Name Type SpeakerPlusObject object SpeakerPlusObject \u00b6 Methods \u00b6 SpeakerPlusObject : Chat () Description: Will make the SpeakerPlusObject chat the given text. Parameters: Name Type Required Text string Yes SpeakerPlusObject : SetFormattingTable () Description: Will apply the given FormattingTable to the SpeakerPlusObject. Parameters: Name Type Required FormattingTable array Yes Properties \u00b6 SpeakerPlusObject . Speaker Description: Is a direct reference to the ChatSpeaker object used. Code Sample \u00b6 Not sure how to use the SpeakerPlus API? No problem! Below is a example of how to get started. -- First you will want to require SpeakerPlus and replace whats in the require currently with the path to the SpeakerPlus module (wherever it is for you) local SpeakerPlus = require ( Path . To . SpeakerPlus ) -- Then, create a SpeakerPlusObject with the first argument being the name in the chat and the second being a FormattingTable (which is optional) local ReallyCoolDude = SpeakerPlus . new ( \"Really Cool Dude\" , {{ \"NameColor\" , Color3 . fromRGB ( 255 , 0 , 0 )}}) -- Next, you can have the SpeakerPlusObject chat! It's as simple as passing in a string to be said. ReallyCoolDude : Chat ( \"Hey, I'm really cool.\" ) -- You can also modify the formatting of the SpeakerPlusObject after creation with a FormattingTable! ReallyCoolDude : SetFormattingTable ({{ \"NameColor\" , Color3 . fromRGB ( 0 , 255 , 0 )}}) -- We can have the SpeakerPlusObject again to see the formatting changes. ReallyCoolDude : Chat ( \"Woah! My name is green now!\" )","title":"SpeakerPlus"},{"location":"api/speakerplus/#global-methods","text":"SpeakerPlus . new () Description: Will create a SpeakerPlus object for you with the given speaker name in the chat and applied formatting from the FormattingTable. Parameters: Name Type Required SpeakerName string Yes FormattingTable array No Returns: Name Type SpeakerPlusObject object","title":"Global Methods"},{"location":"api/speakerplus/#speakerplusobject","text":"","title":"SpeakerPlusObject"},{"location":"api/speakerplus/#methods","text":"SpeakerPlusObject : Chat () Description: Will make the SpeakerPlusObject chat the given text. Parameters: Name Type Required Text string Yes SpeakerPlusObject : SetFormattingTable () Description: Will apply the given FormattingTable to the SpeakerPlusObject. Parameters: Name Type Required FormattingTable array Yes","title":"Methods"},{"location":"api/speakerplus/#properties","text":"SpeakerPlusObject . Speaker Description: Is a direct reference to the ChatSpeaker object used.","title":"Properties"},{"location":"api/speakerplus/#code-sample","text":"Not sure how to use the SpeakerPlus API? No problem! Below is a example of how to get started. -- First you will want to require SpeakerPlus and replace whats in the require currently with the path to the SpeakerPlus module (wherever it is for you) local SpeakerPlus = require ( Path . To . SpeakerPlus ) -- Then, create a SpeakerPlusObject with the first argument being the name in the chat and the second being a FormattingTable (which is optional) local ReallyCoolDude = SpeakerPlus . new ( \"Really Cool Dude\" , {{ \"NameColor\" , Color3 . fromRGB ( 255 , 0 , 0 )}}) -- Next, you can have the SpeakerPlusObject chat! It's as simple as passing in a string to be said. ReallyCoolDude : Chat ( \"Hey, I'm really cool.\" ) -- You can also modify the formatting of the SpeakerPlusObject after creation with a FormattingTable! ReallyCoolDude : SetFormattingTable ({{ \"NameColor\" , Color3 . fromRGB ( 0 , 255 , 0 )}}) -- We can have the SpeakerPlusObject again to see the formatting changes. ReallyCoolDude : Chat ( \"Woah! My name is green now!\" )","title":"Code Sample"},{"location":"api/util/","text":"Util is the built-in ChatPlus utility module. It is used mostly used for only internal applications, but it can be used for any situations you might have. Global Methods \u00b6 Util . CheckOperatorString () Description: Will compare two conditions with a greater or less than symbol in a string. Parameters: Name Type Required Condition1 number Yes Operator string Yes Condition2 number Yes Returns: Name Type ConditionMet bool Util . HasUserChatData () Description: Will check if the given player's user id is in the Users dictionary (checks the index for the user id). Parameters: Name Type Required Player instance Yes Users table Yes Returns: Name Type ConditionMet bool Util . FindHighestPriorityGroup () Description: Will find the highest priority group in the Groups dictionary (see function code for more info). Parameters: Name Type Required Player instance Yes Groups table Yes Returns: Name Type RelevantGroupId integer Util . GetRankTypes () Description: Will return a \"dynamic\" and \"static\" table with catagorized results from the GroupData (see function code for more info). Parameters: Name Type Required GroupData table Yes Returns: Name Type StaticRanks table DynamicRanks table Util . ApplyChatData () Description: Applies the given ChatPlus FormattingTable to a ChatSpeaker object. Parameters: Name Type Required Speaker ChatSpeaker Yes FormattingTable table Yes Util . ConvertDictToInstances () Description: Will convert the given dictionary (TableRef) into folders and values with the first parent being Parent. Parameters: Name Type Required TableRef table Yes Parent instance Yes Util . CheckChatPlusVersion () Description: Will tell you in the output if you are up to date (doesn't print if you are updated fully).","title":"Util"},{"location":"api/util/#global-methods","text":"Util . CheckOperatorString () Description: Will compare two conditions with a greater or less than symbol in a string. Parameters: Name Type Required Condition1 number Yes Operator string Yes Condition2 number Yes Returns: Name Type ConditionMet bool Util . HasUserChatData () Description: Will check if the given player's user id is in the Users dictionary (checks the index for the user id). Parameters: Name Type Required Player instance Yes Users table Yes Returns: Name Type ConditionMet bool Util . FindHighestPriorityGroup () Description: Will find the highest priority group in the Groups dictionary (see function code for more info). Parameters: Name Type Required Player instance Yes Groups table Yes Returns: Name Type RelevantGroupId integer Util . GetRankTypes () Description: Will return a \"dynamic\" and \"static\" table with catagorized results from the GroupData (see function code for more info). Parameters: Name Type Required GroupData table Yes Returns: Name Type StaticRanks table DynamicRanks table Util . ApplyChatData () Description: Applies the given ChatPlus FormattingTable to a ChatSpeaker object. Parameters: Name Type Required Speaker ChatSpeaker Yes FormattingTable table Yes Util . ConvertDictToInstances () Description: Will convert the given dictionary (TableRef) into folders and values with the first parent being Parent. Parameters: Name Type Required TableRef table Yes Parent instance Yes Util . CheckChatPlusVersion () Description: Will tell you in the output if you are up to date (doesn't print if you are updated fully).","title":"Global Methods"},{"location":"maintaining/updating/","text":"Updating ChatPlus is a pretty simple process! will update later to add content lol","title":"Updating ChatPlus"},{"location":"setup/config/","text":"Editing the config of ChatPlus is made easy by the amount of comments in the config already to help you through the process. If you've changed your default config and want to get the comments back or look at something again, use the default config below. return { --== If enabled, ChatPlus will stop checking for updates on server start. ==-- DisableUpdateChecker = false , --== If enabled, the server will send out messages for players joining and leaving. ==-- JoinLeaveMessages = true , --== The chat name to be displayed for system messages. ==-- SystemMessageName = \"Server\" , --== The default formatting for system messages sent through this system. ==-- DefaultSystemMessageFormatting = { { \"NameColor\" , Color3 . fromRGB ( 255 , 255 , 255 )}, { \"ChatColor\" , Color3 . fromRGB ( 255 , 255 , 255 )} }, --== The default formatting applied to every player's messages. ==-- DefaultMessageFormatting = { { \"NameColor\" , Color3 . fromRGB ( 255 , 100 , 100 )}, }, --== The list of users that can have special formatting. ==-- Users = { --== An ID of a user you want goes here. ==-- [ 64917350 ] = { { \"Tags\" , {{ TagText = \"Game Owner!!\" , TagColor = Color3 . fromRGB ( 255 , 0 , 0 )}}} } }, --== The list of groups that can have special formatting. ==-- Groups = { --== An ID of a group you want goes here. ==-- [ 4361197 ] = { --== The priority of this group goes here. The lower the number, the higher priority of the group. ==-- Priority = 10 , --== The \"Global\" tag will be applied to every single member of the group. ==-- [ \"Global\" ] = { { \"ChatColor\" , Color3 . fromRGB ( 255 , 215 , 0 )} }, --== Specific rank numbers apply to exact ranks in the group. ==-- [ \"255\" ] = { { \"Tags\" , {{ TagText = \"Group Owner\" , TagColor = Color3 . fromRGB ( 0 , 0 , 220 )}}} }, --== The Greater Than operator can be added to specifify formatting that should be applied to users with a rank above the listed amount. ==-- [ \">99\" ] = { { \"Tags\" , {{ TagText = \"Pretty Cool\" , TagColor = Color3 . fromRGB ( 0 , 200 , 220 )}}} }, --== The Less Than operator can also be added to apply to those who are under rank 100. ==-- [ \"<100\" ] = { { \"Tags\" , {{ TagText = \"Almost Cool\" , TagColor = Color3 . fromRGB ( 100 , 220 , 100 )}}} } }, }, --== The list of gamepasses that can have special formatting. ==-- Gamepasses = { --== An ID of a gamepass you want goes here. ==-- [ 7785070 ] = { --== The priority of this gamepass goes here. The lower the number, the higher priority of the gamepass. ==-- Priority = 10 , --== The special formatting that should be applied if this gamepass is owned and is the highest priority. ==-- Formatting = { { \"Tags\" , {{ TagText = \"Gamepass Person\" , TagColor = Color3 . fromRGB ( 0 , 255 , 0 )}}} } } }, --== Settings for client-sided aspects of the chat in your game. ==-- ClientChatOptions = { --== Default settings for your game's BubbleChat. Most of these values are dynamic and can be changed at any time. See here: https://crystalflxme.github.io/ChatPlus/setup/dynamic-client-chat-options/ ==-- BubbleChat = { --== Not Dynamic | If enabled, bubble chat will show for players. ==-- Enabled = true , --== The font for the BubbleChat ==-- Font = Enum . Font . SourceSans , --== The font size for the BubbleChat. MUST FIT A FONTSIZE ENUM: https://developer.roblox.com/en-us/api-reference/enum/FontSize ==-- FontSize = 24 , --== The color of the text in the bubble. ==-- TextColor = Color3 . fromRGB ( 0 , 0 , 0 ), --== The background color of the bubble. ==-- BackgroundColor = Color3 . fromRGB ( 255 , 255 , 255 ), --== The max distance before chat bubbles say \"...\" ==-- NearBubbleDistance = 65 , --== The max distance before chat bubbles disappear. ==-- MaxBubbleDistance = 100 } }, -- // Don't touch the things below this line! They are not settings! // -- SystemMessenger = nil }","title":"Editing the config"},{"location":"setup/dynamic-client-chat-options/","text":"While setting up the config you may have noticed this section: --== Settings for client-sided aspects of the chat in your game. ==-- ClientChatOptions = { --== Default settings for your game's BubbleChat. Most of these values are dynamic and can be changed at any time. See here: https://crystalflxme.github.io/ChatPlus/setup/dynamic-client-chat-options/ ==-- BubbleChat = { --== Not Dynamic | If enabled, bubble chat will show for players. ==-- Enabled = true , --== The font for the BubbleChat ==-- Font = Enum . Font . SourceSans , --== The font size for the BubbleChat. MUST FIT A FONTSIZE ENUM: https://developer.roblox.com/en-us/api-reference/enum/FontSize ==-- FontSize = 24 , --== The color of the text in the bubble. ==-- TextColor = Color3 . fromRGB ( 0 , 0 , 0 ), --== The background color of the bubble. ==-- BackgroundColor = Color3 . fromRGB ( 255 , 255 , 255 ), --== The max distance before chat bubbles say \"...\" ==-- NearBubbleDistance = 65 , --== The max distance before chat bubbles disappear. ==-- MaxBubbleDistance = 100 } } This is for changing any chat related settings for the client. Editing the client's chat options is made easy by the way ChatPlus works. Some values can be changed dynamically and they update in real-time. For example, if you changed the font under BubbleChat, the next chat bubble that is created will fit that formatting. The only difference is to edit these values dynamically you have to edit a folder in ReplicatedStorage generated by ChatPlus that defaults to these settings found here. For the values that are not dynamic (marked with \"Not Dynamic\"), like BubbleChat's enabled property, they do not update on the client when you change their value in ReplicatedStorage. They are values only checked on server start. Editing them is this simple and can be done on any server script: local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local ClientChatOptions = ReplicatedStorage : WaitForChild ( \"ClientChatOptions\" ) -- Make sure to use WaitForChild! -- Try chatting now and you'll see that the bubble chat will look like the settings you have in the module wait ( 8 ) ClientChatOptions . BubbleChat . Font . Value = Enum . Font . Arcade . Name ClientChatOptions . BubbleChat . TextColor = Color3 . fromRBG ( 255 , 0 , 0 ) print ( \"Changed the client chat options!\" ) -- Now, if you chat, the chat bubble will have red text and the Arcade font! Make sure to keep in mind that editing these values isn't like the table in the module! You are editing value instances, so you have to add a .Value to edit them correctly (as seen in the example above). For Enum values, make sure to refer to their string name! Enum . Font . Arcade . Name -- OR \"Arcade\"","title":"Dynamic client chat options"},{"location":"setup/getting-started/","text":"Hey there! \u00b6 If you need any help with the system feel free to message me on Twitter or on the DevForum with anything you want clarified or answered! If you have any advice for the system or something you'd like to see added, please also contact me! Steps to install \u00b6 First, get the model for ChatPlus here on Roblox Once you insert the model in your game, place the ChatPlus module on the server-side. It is recommended that you put it in ServerScriptService. Run the following code in your command bar and make sure to replace the PATH_TO_CHATPLUS to the path that leads to the ChatPlus module. p = PATH_TO_CHATPLUS f = p . ToLoadIntoChat for i , v in pairs ( f : GetChildren ()) do v . Parent = game : GetService ( \"Chat\" ) end f : Destroy () You're done! Feel free to mess around with the system! Installing ChatPlus is the easy part! It might be a good idea to also look at the system's gotchas to learn the ins-and-outs of the system before going ahead and configuring the system .","title":"Getting started"},{"location":"setup/getting-started/#hey-there","text":"If you need any help with the system feel free to message me on Twitter or on the DevForum with anything you want clarified or answered! If you have any advice for the system or something you'd like to see added, please also contact me!","title":"Hey there!"},{"location":"setup/getting-started/#steps-to-install","text":"First, get the model for ChatPlus here on Roblox Once you insert the model in your game, place the ChatPlus module on the server-side. It is recommended that you put it in ServerScriptService. Run the following code in your command bar and make sure to replace the PATH_TO_CHATPLUS to the path that leads to the ChatPlus module. p = PATH_TO_CHATPLUS f = p . ToLoadIntoChat for i , v in pairs ( f : GetChildren ()) do v . Parent = game : GetService ( \"Chat\" ) end f : Destroy () You're done! Feel free to mess around with the system! Installing ChatPlus is the easy part! It might be a good idea to also look at the system's gotchas to learn the ins-and-outs of the system before going ahead and configuring the system .","title":"Steps to install"},{"location":"setup/gotchas/","text":"When configuring ChatPlus, there are a few system specific things that you'll want to keep in mind to effectively use the system. They can be seen below. Fun Fact If you would like a direct reference to the system/server SpeakerPlus object that's built into ChatPlus, you can reference \"ChatPlus.SystemMessenger\" to get it. Warning Please do not edit the value called \"BuildNum\" in the Main script because it's used to check if the system is out of date. If you want to stick with an older version you might want to enable \"DisableUpdateChecker\" in the system settings. ChatPlus Formatting \u00b6 ChatPlus uses a special formatting method that is based off of Roblox's default Lua Chat System \"ExtraData\" property. You can read more about the ExtraData property here . All data that can be changed from the ExtraData property transfers to this system. However, there are a few differences in the syntax. Normally, you would do this to change a chat name color: Speaker : SetExtraData ( \"NameColor\" , Color3 . fromRGB ( 255 , 255 , 255 )) But with ChatPlus, you do this instead: { \"NameColor\" , Color3 . fromRGB ( 255 , 255 , 255 )} When placed inside of another table to hold all of the data you want to set, this is known as a ChatPlus FormattingTable It is what the system uses to know how to format chat messages. More examples of FormattingTables can be found here on the examples page . ChatPlus Formatting Priority \u00b6 The Rule of Formatting Priority in ChatPlus When certain formatting has priority over another, the one that doesn't have the priority is not shown at all! The \"Global\" tag under the \"Groups\" table will apply to every single user and bypasses any formatting priority in the group. Gamepasses have the lowest formatting priority and will only show if the user is not in the Users table or in a specified group. If a user is listed under the \"Users\" table, then that formatting will take priority over any other formatting (even groups). Example: If the user is a rank that gets formatting in a group, all if it will be overridden by whatever the user formatting is (even the \"Global\" tag). The group \"Priority\" number represents what groups/gamepasses should take formatting priority over the other. Example: If a user is in more than one group listed the group with more priority (smaller number) will be used for formatting. Ranks without a greater or less than symbol will take priority over formatting that has them. Example: The rank \"250\" formatting would take priority over the \">200\" rank formatting even though it is still true.","title":"System gotchas"},{"location":"setup/gotchas/#chatplus-formatting","text":"ChatPlus uses a special formatting method that is based off of Roblox's default Lua Chat System \"ExtraData\" property. You can read more about the ExtraData property here . All data that can be changed from the ExtraData property transfers to this system. However, there are a few differences in the syntax. Normally, you would do this to change a chat name color: Speaker : SetExtraData ( \"NameColor\" , Color3 . fromRGB ( 255 , 255 , 255 )) But with ChatPlus, you do this instead: { \"NameColor\" , Color3 . fromRGB ( 255 , 255 , 255 )} When placed inside of another table to hold all of the data you want to set, this is known as a ChatPlus FormattingTable It is what the system uses to know how to format chat messages. More examples of FormattingTables can be found here on the examples page .","title":"ChatPlus Formatting"},{"location":"setup/gotchas/#chatplus-formatting-priority","text":"The Rule of Formatting Priority in ChatPlus When certain formatting has priority over another, the one that doesn't have the priority is not shown at all! The \"Global\" tag under the \"Groups\" table will apply to every single user and bypasses any formatting priority in the group. Gamepasses have the lowest formatting priority and will only show if the user is not in the Users table or in a specified group. If a user is listed under the \"Users\" table, then that formatting will take priority over any other formatting (even groups). Example: If the user is a rank that gets formatting in a group, all if it will be overridden by whatever the user formatting is (even the \"Global\" tag). The group \"Priority\" number represents what groups/gamepasses should take formatting priority over the other. Example: If a user is in more than one group listed the group with more priority (smaller number) will be used for formatting. Ranks without a greater or less than symbol will take priority over formatting that has them. Example: The rank \"250\" formatting would take priority over the \">200\" rank formatting even though it is still true.","title":"ChatPlus Formatting Priority"}]}